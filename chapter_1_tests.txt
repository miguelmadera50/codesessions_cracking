1.1
// Is Unique: Implement an algorithm to determine if a string has all unique characters. What if you cannot use
// additional data structures?
Positive - assuming only 26 chars
""
"a"
"abc"
"qwertyuiopasdfghjklzxcvbnm"

Negative - assuming only 26 chars
"aa"
"qwertyuiopasdfghjklzxcvbnq"
"qwertyuiopasdfghjklzxcvbnzuythe"
"qwertyhnbgfdsabzxc"


1.2
// Check Permutation: Given two strings, write a method to decide of one is a permutation of the other.
Positive - assuming only 26 chars
"" ""
"a" "a"
"zzzzzzz" "zzzzzzz"
"abcd" "dcba"
"qwertty" "tqweryt"

Negative - assuming only 26 chars
"a" "b"
"a" "aa"
"aaaaa" "aa"
"qwerty" "qwerti"
"miridso" "miridsd"


1.3
// URLify: Write a method to replace all spaces in a string with '%20'. You may assume that the string has
// sufficient space at the end to hold the additional characters, and that you are given the 'true' length of
// the string.
Assuming asterisks as nulls/extrachar. Only using 26 chars
"a b**" -> "a%20b"
"a b ****" -> "a%20b%20"
"a    b********" -> "a%20%20%20%20b"
"   ******" -> "%20%20%20"
"www google a com search **********" -> "www%20google%20a%20com%20search%20"


1.4
// Palindrome Permutation: Given a string, write a function to check if is a permutation of a palindrome. A
// palindrome is a rearrangement of letters. The palindrome does not need to be limited to just dictionary
// words.
Positive
""
"a"
"aaaaaaaaaaaa"
"aab"
"abbab"
"qwqwerre"
"qrytweqwertyaaa"

Negative
"ab"
"qwer"
"asjdoiasfyuenasdflkhehee"
"alpqalpqlapqcalpqbhbht"


1.5
// One Away: There are three types of edits that can be performed on strings: insert a character, remove a
// character, or replace a character. Given two strings, write a function to check if they are one edit (or
// zero edits) away.
Positive
"" ""
"aa" "aa"
"" "a"
"a" ""
"a" "b"
"q" "qq"
"qq" "q"

Negative
"ba" ""
"word" "dwor"
"ab" "ba"
"a" "aaa"
"qwer" "qrew"


1.6
// String Compression: Implement a method to perform basic string compression using the counts of repeated
// characters. For example, the string "aabcccccaaa" would become "a2b1c5a3". If the compressed string would not
// become smaller than the original string, your method should return the original string. You can assume the
// string has only uppercase and lowercase letters.
"" -> ""
"a" -> "a"
"aa" -> "aa"
"aaa" -> "a3"
"aaabbbccc" -> "a3b3c3"
"abcdefgh" -> "abcdefgh"
"aabgggarrraatttt" -> "a2b1g3a1r3a2t4"
"aabgggarrraatt" -> "aabgggarrraatt"


1.7
// Rotate Matrix: Given an image represented by an NxN matrix, where each pixel in the image is 4 bytes, write a
// method to rotate the image by 90 degrees. Can you do this in-place?
// Note: int (in C - based languages) is 32 bits / 4 bytes
1 1 2 3    0 6 2 1
2 9 0 1 -> 6 6 9 1
6 6 6 2    5 6 0 2
0 6 5 1    1 2 1 3

1 2 3    7 4 1
4 5 6 -> 8 5 2
7 8 9    9 6 3

1 2  -> 3 1
3 4     4 2

1.8
// Zero Matrix: Write an algorithm such that if an element in an MxN matrix is 0, its entire row and column are
// set to 0.
1 1 2 3    0 1 0 3
2 9 0 1 -> 0 0 0 0
6 6 6 2    0 6 0 2
0 6 5 1    0 0 0 0
7 3 1 1    0 3 0 1

1 2 3    7 0 1
4 0 6 -> 0 0 0
7 8 9    9 0 3

1 0  -> 0 0
0 4     0 0

1.9
// String Rotation: Assume you have a method isSubstring which checks if one word is a substring of another.
// Given two strings, s1 and s2, write code to ch3eck if s2 is a rotation of s1 by using only one call to
// isSubstring (e.g., "waterbottle" is a rotation of "erbottlewat").
Positive
"" ""
"aba" "baa"
"waterbottle" "erbottlewat"
"rotation" "ationrot"

Negative
"" "a"
"aba" "bba"
"waterbottle" "erbotltewat"
"rotation" "ationrotat"
